#!/usr/bin/env bash

# default settings
_rofi () {
    rofi -regex -tokenize -i -lines 30 -width 1500 -no-levenshtein-sort "$@"
}
noteroot="$HOME/Documents/bashtodo"
done_notes="$HOME/Documents/bashtodo/done"
BROWSER=chromium
title_color="#2d7ed8"

# load custom settings
source $HOME/.config/dofi/config

# start script
cd "${noteroot}"

listtodo () {
    list=$(for i in *.todo; do sort "${i}" | awk -F ': ' '{ print $2 }' | tr '\n' '\t' | sed -e "s/$/                                                                                                                                       file: $i/"; echo; done | sort | column -s $'\t' -t)
    high=$(echo "${list}" | grep -n "^1" | cut -f1 -d:)
    high=$(echo "$high" | while read line; do echo $(( $line + 1 )); done | sed ':a;N;$!ba;s/\n/, /g')
    medium=$(echo "${list}" | grep -n "^2" | cut -f1 -d:)
    medium=$(echo "$medium" | while read line; do echo $(( $line + 1 )); done | sed ':a;N;$!ba;s/\n/, /g')
}

main () {
    HELP="Welcome to dofi. Use <span color='${title_color}'>Alt+n</span> to create a new todo"
    listtodo
    file=""
    mainmenu=$(echo -e "< Exit\n---\n${list}" | _rofi -kb-custom-1 "Alt+n" -u "${high}" -a "${medium}" -mesg "${HELP}" -dmenu -p "> ")
    val=$?
    if [[ $val -eq 10 ]]; then
        newitem
    elif [[ $val -eq 1 ]]; then exit
    elif [[ $val -eq 0 ]]; then
        if [[ $mainmenu == "< Exit" ]]; then exit
        elif [[ $mainmenu == "---" ]]; then main
        else optionsmenu
        fi
    fi
}

newitem () {
    title=$(echo -e "< Cancel" | _rofi -dmenu -mesg "Title for new task" -p "> ")
    val=$?
    if [[ $val -eq 1 ]]; then exit
    else
        if [[ $title == "< Cancel" ]]; then main
        else :
        fi
    fi
    group=$(echo -e "< Cancel\n---\n$(grep -how '\+.*' *.todo | sort -u | sed 's/, /\n/g')" | _rofi -dmenu -p "> " -mesg "Enter Group or chose one below")
    val=$?
    if [[ $val -eq 1 ]]; then exit
    else
        if [[ $group == "< Cancel" ]]; then main
        else :
        fi
    fi
    tags=$(echo -e "< Cancel\n---\n$(grep -how '\@.*' *.todo | sed 's/, /\n/g' | sort -u)" | _rofi -dmenu -p "> " -mesg "Enter Tags (comma separated) or chose below (Use Space+Enter to multi-select)")
    val=$?
    if [[ $val -eq 1 ]]; then exit
    else
        if [[ $tags == "< Cancel" ]]; then main
        else :
        fi
    fi
    tags=$(echo "$tags" | sed ':a;N;$!ba;s/\n/, /g' | sort | uniq)
    newfile=$(date +'%Y-%m-%d-%H%M%S'.todo)
    echo -e "abc: 3\ncaption: ${title}\ngroup: ${group}\ntags: ${tags}" >> "${noteroot}/${newfile}"
    file=${newfile} optionsmenu
}
    

editmenu () {
    if [[ -z $file ]]; then
        file=$(echo ${mainmenu} | awk -F 'file: ' '{ print $2 }')
    fi
    sort "${file}"
    listitems=$(echo -e "< Return\n---\n$(sort ${noteroot}/${file})" | _rofi -dmenu -p "> ")
    val=$?
    if [[ $val -eq 1 ]]; then exit
    elif [[ $val -eq 0 ]]; then
        if [[ $listitems == "< Return" ]]; then main
        elif [[ $listitems == "---" ]]; then :
        else
            field=$(echo ${listitems} | awk -F ': ' '{ print $1 }')
            value=$(echo ${listitems} | awk -F ': ' '{ print $2 }')
            inputmenu=$(echo "" | _rofi -dmenu -p "> " -mesg "Enter new value for ${field}" -filter "${value}")
            val=$?
            if [[ $val -eq 1 ]]; then exit
            else
                sed -i "/^${field}/ d" "${noteroot}/${file}"
                echo "${field}: ${inputmenu}" >> "${noteroot}/${file}"
            fi
        fi
    fi
    main
}

optionsmenu () {
    if [[ -z $file ]]; then
        file=$(echo ${mainmenu} | awk -F 'file: ' '{ print $2 }')
    fi
    title=$(grep -P '^caption: ' "${noteroot}/${file}" | awk -F 'caption: ' '{ print $2 }')
    url=$(grep -P '^url: ' "${noteroot}/${file}" | awk -F 'url: ' '{ print $2 }')
    help_url=$(echo "${url}" | cut -c 1-100)
    help_url2="$(echo "${help_url}" | out2html -p)"
    if [[ -z $url ]]; then
        HELP="Item: <span color='${title_color}'>${title}</span>"
        doopt=$(echo -e "< Return\n---\n1. Mark Done\n2. Delete\n3. Set Priority\n4. Edit\n---\n5. Add URL"| _rofi -mesg "${HELP}" -dmenu -p "> ")
    else
        HELP="Item: <span color='${title_color}'>${title}</span>
URL:  <span color='${title_color}'>${help_url2}</span>"
        doopt=$(echo -e "< Return\n---\n1. Mark Done\n2. Delete\n3. Set Priority\n4. Edit\n---\n5. Open URL\n6. Delete URL"| _rofi -mesg "${HELP}" -dmenu -p "> ")
    fi
    val=$?
    if [[ $val -eq 1 ]]; then exit
    else
        if [[ $doopt == "5. Open URL" ]]; then $BROWSER "${url}"
        elif [[ $doopt == "1. Mark Done" ]]; then mv "${noteroot}/${file}" "${done_notes}"; optionsmenu
        elif [[ $doopt == "2. Delete" ]]; then delitem
        elif [[ $doopt == "3. Set Priority" ]]; then setpriority
        elif [[ $doopt == "4. Edit" ]]; then editmenu
        elif [[ $doopt == "< Return" ]]; then main
        elif [[ $doopt == "5. Add URL" ]]; then addURL
        elif [[ $doopt == "6. Delete URL" ]]; then delURL
        elif [[ $doopt == "---" ]]; then optionsmenu
        fi
    fi
}

addURL () {
    if [[ -z $file ]]; then
        file=$(echo ${mainmenu} | awk -F 'file: ' '{ print $2 }')
    fi
    urlmenu=$(echo -e "< Cancel" | _rofi -dmenu -mesg "Add URL to ${title}" -p "> ")
    echo "url: ${urlmenu}" >> "${noteroot}/${file}"
    optionsmenu
}

delURL () {
    if [[ -z $file ]]; then
        file=$(echo ${mainmenu} | awk -F 'file: ' '{ print $2 }')
    fi
    urlmenu=$(echo -e "1. Yes\n2. No" | _rofi -dmenu -mesg "Delete URL ${url}?" -p "> ")
    if [[ $urlmenu == "1. Yes" ]]; then sed -i '/^url: / d' "${noteroot}/${file}"
    elif [[ $urlmenu == "2. No" ]]; then :
    fi
    optionsmenu
}
    
delitem () {
    if [[ -z $file ]]; then
        file=$(echo ${mainmenu} | awk -F 'file: ' '{ print $2 }')
    fi
    itemmenu=$(echo -e "1. Yes\n2. No" | _rofi -dmenu -mesg "Delete item ${title}?" -p "> ")
    if [[ $itemmenu == "1. Yes" ]]; then rm -f "${noteroot}/${file}"
    elif [[ $itemmenu == "2. No" ]]; then :
    fi
    main
}

setpriority () {
    if [[ -z $file ]]; then
        file=$(echo ${mainmenu} | awk -F 'file: ' '{ print $2 }')
    fi
    title=$(awk -F 'caption: ' '{ print $2 }' "${noteroot}/${file}")
    priomenu=$(echo -e "< Return\n---\n1\n2\n3" | _rofi -dmenu -p "> " -mesg "Set Priority for item ${title}")
    val=$?
    if [[ $val -eq 1 ]]; then exit
    else
        if [[ $priomenu == "< Return" ]]; then optionsmenu
        elif [[ $priomenu == "---" ]]; then setpriority
        else
            sed -i "/^abc: / d" "${noteroot}/${file}"
            echo "abc: ${priomenu}" >> "${noteroot}/${file}"
        fi
    fi
    optionsmenu
}

if [[ ! -d "$noteroot" ]]; then
    echo "Error: Directory ${noteroot} does not exist"
    exit
fi
if [[ ! -d "$done_notes" ]]; then
    echo "Error: Directory ${done_notes} does not exist"
    exit
fi
main

