#!/bin/bash

source $HOME/.config/dofi/config

todo () {
    ${todo_bin} -p "$@"
}

cd "${root}"
if [[ ! -d "./.git" ]]; then
    git init
fi


main () {
    totaltodos=$(todo.sh ls | tail -1 | awk -F ' ' '{ print $2 }')
    pad=$(echo -n "${totaltodos}" | wc -c)

    tasklist=$(echo -e "< Exit\n---\n$(todo ls)" |roficmd -dmenu -kb-custom-1 "Alt+n" -kb-custom-2 "Alt+Tab" -mesg "Alt+n: New Task | Alt+Tab: Switch View" -filter "${filter}" -p "Tasklist > ")
    tasklist_val=$?

    item_text=${tasklist}
    item=$(echo "${item_text}" | sed 's/^0*//' | awk '{ print $1 }')
    if [[ $tasklist_val -eq 1 ]]; then
        exit
    elif [[ $tasklist_val -eq 10 ]]; then
        inputmenu=$(echo "" | roficmd -dmenu -p "> " -mesg "Format: \"TODO NAME\" +PROJECT @CONTEXT")
        todo a "${inputmenu}"
        text="Added item ${item}" gitHook
        main
    elif [[ $tasklist_val -eq 11 ]]; then
        taskview_menu=$(echo -e "< Return\n---\n1 Show tasks by Priority\n2 List Projects\n3 List Tags" | roficmd -dmenu -p "View > ")
        if [[ $taskview_menu == "1 Show tasks by Priority" ]]; then
            prio_view_menu=$(echo -e "< Return\n---\n$(todo lsp)" | roficmd -dmenu -p "Tasks by Priority > ")
            if [[ $prio_view_menu == "< Return" ]]; then
                main
            else
                item=$(echo "${prio_view_menu}" | sed 's/^0*//' | awk '{ print $1 }')
                actions
            fi
        elif [[ $taskview_menu == "2 List Projects" ]]; then
            proj_menu=$(echo -e "< Return\n---\n$(todo ls | grep -ow '+\w*' | sort | uniq)" | roficmd -dmenu -p "Projects > ")
            proj_menu_val=$?
            if [[ $proj_menu_val -eq 1 ]]; then exit; fi
            if [[ $proj_menu == "< Return" ]]; then
                main
            else
                filter="${proj_menu}" main
            fi
        elif [[ $taskview_menu == "3 List Tags" ]]; then
            tags_menu=$(echo -e "< Return\n---\n$(todo ls | grep -ow '@\w*' | sort | uniq)" | roficmd -dmenu -p "Tags > ")
            tags_menu_val=$?
            if [[ $tags_menu_val -eq 1 ]]; then exit; fi
            if [[ $tags_menu == "< Return" ]]; then
                main
            else
                filter="${tags_menu}" main
            fi
        elif [[ $taskview_menu == "< Return" ]]; then
            main
        fi
    else
        if [[ $tasklist == "< Exit" ]]; then
            exit
        else
            actions
        fi
    fi
}

actions () {
    if [[ $(todo note show ${item}) == "TODO: Task ${item} has no note." ]]; then
        unset url
        unset url_filename
    else
        url=$(todo note show ${item})
    fi

    if [[ -z $url ]]; then
        actionlist=$(echo -e "< Return\n---\n1 Mark Done\n2 Archive\n3 Delete\n4 Set Priority\n---\n5 Associate URL" | roficmd -dmenu -p "Actions for item ${item} > ")
        actionlist_val=$?
    elif [[ -n $url ]]; then
        actionlist=$(echo -e "< Return\n---\n1 Mark Done\n2 Archive\n3 Delete\n4 Set Priority\n---\n5 Open URL\n6 Delete URL" | roficmd -dmenu -mesg "Detected URL: ${url}" -p "Actions for item ${item} > ")
        actionlist_val=$?

        message="Detected URL: ${url}"
    fi

    if [[ $actionlist_val -eq 1 ]]; then exit
    else

    if [[ $actionlist == "1 Mark Done" ]]; then
        todo 'do' "${item}"
        text="Marked item ${item} as DONE" gitHook
        main

    elif [[ $actionlist == "< Return" ]]; then
        main

    elif [[ $actionlist == "2 Archive" ]]; then
        todo archive "${item}"
        text="Archived item ${item}" gitHook
        main

    elif [[ $actionlist == "3 Delete" ]]; then
        askmenu=$(echo -e "1. Yes\n2. No" | roficmd -dmenu -p "Delete item ${item}? > ")
        if [[ $askmenu == "1. Yes" ]]; then
            yes | todo del "${item}";
            text="Deleted item ${item}" gitHook
            main
        elif [[ $askmenu == "2. No" ]]; then
            actions
        fi

    elif [[ $actionlist == "4 Set Priority" ]]; then
        prio_menu=$(echo -e "< Return\n---\nA\nB\nC\nD\nE\nUnset Priority" | roficmd -dmenu -p "Priority > ")
        if [[ $prio_menu == "< Return" ]]; then
            actions

        elif [[ $prio_menu == "Unset Priority" ]]; then
            todo dp "${item}"
            text="Removed priority from item ${item}" gitHook
            actions

        else
            todo p "${item}" "${prio_menu}"
            text="Set priority for item ${item} to ${prio_menu}" gitHook
            actions
        fi

    elif [[ $actionlist == "5 Associate URL" ]]; then
        urlinput=$(echo "" | roficmd -dmenu -mesg "Enter URL" -p "> ")
        urlintput_val=$?

        if [[ $urlinput_val -eq 1 ]]; then exit
        else
            randomstring=$(date +%s | sha256sum | base64 | head -c 3 ; echo)
            number=$(printf %0${pad}d ${item})
            todo append ${item} "note:$(echo -n "${randomstring}.txt")"
            url_filename=$(todo ls | grep -P "^${number}" | awk -F 'note:' '{ print $2 }' | sed -e 's/[[:space:]]*$//')

            echo "${urlinput}" > "${root}/notes/${url_filename}";
        text="Added URL to item ${item}" gitHook
        unset url_filename
        actions
        fi

    elif [[ $actionlist == "5 Open URL" ]]; then
        "$BROWSER" "${url}"

    elif [[ $actionlist == "6 Delete URL" ]]; then
        askmenu=$(echo -e "1. Yes\n2. No" | roficmd -dmenu -p "Delete item ${item}? > ")
        if [[ $askmenu == "1. Yes" ]]; then
            number=$(printf %0${pad}d ${item})
            update_text=$(todo.sh -p ls | grep -P "^${number}" | cut -d ' ' -f2- | sed 's/(A) //;s/(B) //;s/(C) //;s/(D) //;s/(E) //;s/(F) //' | sed 's/note:.*//')
            todo replace "${item}" "${update_text}"
            url_filename=$(todo ls | grep -P "^${number}" | awk -F 'note:' '{ print $2 }' | sed -e 's/[[:space:]]*$//')
            rm "${root}/notes/${url_filename}"
            text="Removed URL from item ${item}" gitHook
            actions
        elif [[ $askmenu == "2. No" ]]; then
            actions
        fi
    else
        actions
    fi
    fi
}

gitHook () {
    git add *
    git add notes/*
    git commit -m "${text}"
}

if [[ -z "$rofiopts" ]]; then
    roficmd () {
        rofi -dmenu "$@"
    }
else
    roficmd () {
        rofi -dmenu $(echo "$rofiopts") "$@"
    }
fi

main
