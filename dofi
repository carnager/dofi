#!/bin/bash

source $HOME/.config/dofi/config

todo () {
    ${todo_bin} -p "$@"
}

cd "${root}"
if [[ ! -d "./.git" ]]; then
    git init
fi


main () {
    tasklist=$(echo -e "< Exit\n---\n$(todo ls)" | roficmd -dmenu -kb-custom-1 "Alt+n" -kb-custom-2 "Alt+Tab" -mesg "Alt+n: New Task | Alt+Tab: Switch View" -filter "${filter}" -p "Tasklist > ")
    tasklist_val=$?
    item=$(echo "${tasklist}" | awk '{ print $1 }')
    if [[ $tasklist_val -eq 1 ]]; then
        exit
    elif [[ $tasklist_val -eq 10 ]]; then
        inputmenu=$(echo "" | roficmd -dmenu -p "> " -mesg "Format: \"TODO NAME\" +PROJECT @CONTEXT")
        todo a "${inputmenu}"
        gitHook
        main
    elif [[ $tasklist_val -eq 11 ]]; then
        taskview_menu=$(echo -e "1 Show tasks by Priority\n2 List Projects" | roficmd -dmenu -p "View > ")
        if [[ $taskview_menu == "1 Show tasks by Priority" ]]; then
            prio_view_menu=$(echo -e "< Return\n---\n$(todo lsp)" | roficmd -dmenu -p "Tasks by Priority > ")
            if [[ $prio_view_menu == "< Return" ]]; then
                main
            else
                item=$(echo "${prio_view_menu}" | awk '{ print $1 }')
                actions
            fi
        elif [[ $taskview_menu == "2 List Projects" ]]; then
            proj_menu=$(echo -e "< Return\n---\n$(todo ls | grep -ow '+\w*' | uniq)" | roficmd -dmenu -p "Projects > ")
            proj_menu_val=$?
            if [[ $proj_menu_val -eq 1 ]]; then exit
            elif [[ $proj_menu_val == "< Return" ]]; then
                main
            else
                filter="${proj_menu}" main
            fi
        fi
    else
        if [[ $tasklist == "< Exit" ]]; then
            exit
        else
            actions
        fi
    fi
}

actions () {
    url=$(cat "${root}/notes/${item}.url" 2> /dev/null)
    note=$(cat "${root}/notes/${item}.note" 2> /dev/null )
    if [[ -z $url ]]; then
        if [[ -z $note ]]; then
            actionlist=$(echo -e "< Return\n---\n1 Mark Done\n2 Archive\n3 Delete\n4 Set Priority\n---\n5 Associate URL\n9 Add Note" | roficmd -dmenu -p "Actions for item ${item} > ")
            actionlist_val=$?

        elif  [[ -n $note ]]; then
            actionlist=$(echo -e "< Return\n---\n1 Mark Done\n2 Archive\n3 Delete\n4 Set Priority\n---\n5 Associate URL\n---\n8 View Note\n9 Edit Note\n0 Delete Note" | roficmd -dmenu -mesg "$(echo ${note} | head -1)" -p "Actions for item ${item} > ")
            actionlist_val=$?
        fi
    elif [[ -n $url ]]; then
        if [[ -z $note ]]; then
            actionlist=$(echo -e "< Return\n---\n1 Mark Done\n2 Archive\n3 Delete\n4 Set Priority\n---\n5 Open URL\n6 Delete URL\n---\n9 Add Note" | roficmd -dmenu -mesg "Detected URL: ${url}" -p "Actions for item ${item} > ")
            actionlist_val=$?

        elif  [[ -n $note ]]; then
            message="Detected URL: ${url}
Note Preview: $(head -1 ${root}/notes/${item}.note)"
            actionlist=$(echo -e "< Return\n---\n1 Mark Done\n2 Archive\n3 Delete\n4 Set Priority\n---\n5 Open URL\n6 Delete URL\n---\n8 View Note\n9 Edit Note\n0 Delete Note" | roficmd -dmenu -mesg "${message}" -p "Actions for item ${item} > ")
            actionlist_val=$?
        fi
    fi

    if [[ $actionlist_val -eq 1 ]]; then exit
    else

    if [[ $actionlist == "1 Mark Done" ]]; then
        todo 'do' "${item}"
        gitHook
        main

    elif [[ $actionlist == "< Return" ]]; then
        main

    elif [[ $actionlist == "2 Archive" ]]; then
        todo archive "${item}"
        gitHook
        main

    elif [[ $actionlist == "3 Delete" ]]; then
        askmenu=$(echo -e "1. Yes\n2. No" | roficmd -dmenu -p "Delete item ${item}? > ")
        if [[ $askmenu == "1. Yes" ]]; then
            yes | todo del "${item}";
            rm "${root}/notes/${item}" > /dev/null
            gitHook
            main
        elif [[ $askmenu == "2. No" ]]; then
            actions
        fi

    elif [[ $actionlist == "4 Set Priority" ]]; then
        prio_menu=$(echo -e "< Return\n---\nA\nB\nC\nD\nE\nUnset Priority" | roficmd -dmenu -p "Priority > ")
        if [[ $prio_menu == "< Return" ]]; then
            actions

        elif [[ $prio_menu == "Unset Priority" ]]; then
            todo dp "${item}"
            gitHook
            actions

        else
            todo p "${item}" "${prio_menu}"
            gitHook
            actions
        fi

    elif [[ $actionlist == "9 Add Note" || $actionlist == "9 Edit Note" ]]; then
        notemenu=$(echo -e "< Return\n1 Use Editor" | roficmd -dmenu -p "Set Note > " -mesg "Type Note or select below")
        if [[ $notemenu == "< Return" ]]; then
            actions
        elif [[ $notemenu == "1 Use Editor" ]]; then
            ${EDITOR} "${root}/notes/${item}.note"
            gitHook
            actions
        else
            echo -e "${notemenu}" > "${root}/notes/${item}.note"
            gitHook
            actions
        fi

    elif [[ $actionlist == "8 View Note" ]]; then
        noteview=$(echo -e "< Return\n---\n${note}" | roficmd -dmenu -p "Note for item ${item} > ")
        noteview_val=$?
        if [[ $noteview_val -eq 1 ]]; then
            exit
        else
            if [[ $noteview == "< Return" ]]; then
                actions
            fi
        fi

    elif [[ $actionlist == "0 Delete Note" ]]; then
        rm -f "${root}/notes/${item}.note"
        actions

    elif [[ $actionlist == "5 Associate URL" ]]; then
        urlinput=$(echo "" | roficmd -dmenu -mesg "Enter URL" -p "> ")
        urlintput_val=$?
        if [[ $urlinput_val -eq 1 ]]; then exit
        else echo "${urlinput}" > "${root}/notes/${item}.url";
        gitHook
        actions
        fi

    elif [[ $actionlist == "5 Open URL" ]]; then
        "$BROWSER" "${url}"

    elif [[ $actionlist == "5. Delete URL" ]]; then
        askmenu=$(echo -e "1. Yes\n2. No" | roficmd -dmenu -p "Delete item ${item}? > ")
        if [[ $askmenu == "1. Yes" ]]; then
            rm "${root}/notes/${item}.url"
            gitHook
            actions
        elif [[ $askmenu == "2. No" ]]; then
            actions
        fi
    else
        actions
    fi
    fi
}

gitHook () {
    git add *
    git add notes/*
    git commit -m "update"
}

if [[ -z "$rofiopts" ]]; then
    roficmd () {
        rofi -dmenu "$@"
    }
else
    roficmd () {
        rofi -dmenu $(echo "$rofiopts") "$@"
    }
fi

main
